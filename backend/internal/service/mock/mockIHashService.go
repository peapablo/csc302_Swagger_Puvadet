// Code generated by MockGen. DO NOT EDIT.
// Source: backend/internal/service (interfaces: IHashService)
//
// Generated by this command:
//
//	mockgen -destination=./mock/mockIHashService.go -package=mock backend/internal/service IHashService
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIHashService is a mock of IHashService interface.
type MockIHashService struct {
	ctrl     *gomock.Controller
	recorder *MockIHashServiceMockRecorder
	isgomock struct{}
}

// MockIHashServiceMockRecorder is the mock recorder for MockIHashService.
type MockIHashServiceMockRecorder struct {
	mock *MockIHashService
}

// NewMockIHashService creates a new mock instance.
func NewMockIHashService(ctrl *gomock.Controller) *MockIHashService {
	mock := &MockIHashService{ctrl: ctrl}
	mock.recorder = &MockIHashServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHashService) EXPECT() *MockIHashServiceMockRecorder {
	return m.recorder
}

// Base64Encode mocks base method.
func (m *MockIHashService) Base64Encode(input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base64Encode", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Base64Encode indicates an expected call of Base64Encode.
func (mr *MockIHashServiceMockRecorder) Base64Encode(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base64Encode", reflect.TypeOf((*MockIHashService)(nil).Base64Encode), input)
}

// ComparePassword mocks base method.
func (m *MockIHashService) ComparePassword(hashedPassword, password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", hashedPassword, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockIHashServiceMockRecorder) ComparePassword(hashedPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockIHashService)(nil).ComparePassword), hashedPassword, password)
}

// HashPassword mocks base method.
func (m *MockIHashService) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockIHashServiceMockRecorder) HashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockIHashService)(nil).HashPassword), password)
}
